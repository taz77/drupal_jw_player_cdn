<?php

/**
 * @file
 * Module file for JW Player CDN Module.
 */
// Load all Field module hooks.
module_load_include('inc', 'jw_player_cdn', 'jw_player_cdn.field');

// Load services
module_load_include('inc', 'jw_player_cdn', 'services/cloudfront');

/**
 * Implements hook_menu().
 */
function jw_player_cdn_menu() {
  $items = array();
  $items['admin/config/media/jw_player_cdn'] = array(
    'title' => 'JW Player CDN Settings',
    'description' => 'JW Player CDN Setting Page',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('jw_player_cdn_admin'),
    'access arguments' => array('administer jwplayer cdn module'),
    'file' => 'jw_player_cdn.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function jw_player_cdn_permission() {
  return array(
    'administer jwplayer cdn module' => array(
      'title' => t('Administer JW Player CDN Module'),
    ),
  );
}

/**
 * Node Creation Hooks and Information
 */

/**
 * Implements hook_node_info().
 *
 * We use hook_node_info() to define our node content type.
 */
function jw_player_cdn_node_info() {
  // We define the node type as an associative array.
  return array(
    'jw_player_cdn_video' => array(
      'name' => t('Video Series for JW Player'),
      'base' => 'jw_player_cdn',
      'description' => t('These are nodes used to build video series.'),
      'title_label' => t('Video Name'),
      // We'll set the 'locked' attribute to TRUE, so users won't be
      // able to change the machine name of our content type.
      'locked' => TRUE,
    ),
  );
}

/**
 * Implements hook_form().
 *
 * Drupal needs for us to provide a form that lets the user
 * add content. This is the form that the user will see if
 * they go to node/add/jw-player-cdn.
 *
 * You can get fancy with this form, or you can just punt
 * and return the default form that node_content will provide.
 */
function jw_player_cdn_form($node, $form_state) {
  return node_content_form($node, $form_state);
}

/**
 * Implements hook_node_type_insert().
 */
function jw_player_cdn_node_type_insert($content_type) {
  echo $content_type->type;
  if ($content_type->type == 'jw_player_cdn_video') {

    foreach (jw_player_cdn_installed_fields() as $field) {
      field_create_field($field);
    }
    // Create all the instances for our fields.
    foreach (jw_player_cdn_installed_instances() as $instance) {
      $instance['entity_type'] = 'node';
      $instance['bundle'] = 'jw_player_cdn_video';
      field_create_instance($instance);
    }
  }
}

/**
 * Returns fields created by this module.
 */
function jw_player_cdn_installed_fields() {
  return array(
    'player_cdn_files' => array(
      'field_name' => 'jw_player_cdn_video_series',
      'cardinality' => FIELD_CARDINALITY_UNLIMITED,
      'type' => 'jw_player_cdn_video_series',
    ),
    'player_cdn_description' => array(
      'field_name' => 'jw_player_cdn_video_desc',
      'cardinality' => 1,
      'type' => 'text_long',
    )
  );
}

/**
 * Define the field instances for our content type.
 *
 * The instance lets Drupal know which widget to use to allow the user to enter
 * data and how to react in different view modes.  We are going to display a
 * page that uses a custom "node_example_list" view mode.  We will set a
 * cardinality of three allowing our content type to give the user three color
 * fields.
 *
 * This big array is factored into this function for readability.
 *
 * @return array
 *   An associative array specifying the instances we wish to add to our new
 *   node type.
 */
function jw_player_cdn_installed_instances() {
  return array(
    'jw_player_video_series_instance_files' => array(
      'field_name' => 'jw_player_cdn_video_series',
      'label' => t('Videos for this series'),
      'widget' => array(
        'type' => 'jw_player_cdn_video_series_widget',
        'weight' => 10,
      ),
    ),
    'jw_player_video_series_instance_desc' => array(
      'field_name' => 'jw_player_cdn_video_desc',
      'label' => t('Description of this video series.'),
      'type' => 'jw_player_cdn_video_desc',
      'widget' => array(
        'active' => 1,
        'module' => 'text',
        'settings' => array(
          'rows' => 5,
        ),
        'type' => 'text_textarea',
        'weight' => 1,
      ),
      'format' => 'filter_html',
      'settings' => array(
        'text_processing' => 1,
        'user_register_form' => FALSE,
      ),
    ),
  );
}

/**
 * ****************************************************************************
 * Themeing of Custom Node Type
 * ****************************************************************************
 */

/**
 * Implements hook_theme().
 */
function jw_player_cdn_theme() {
  $theme = array();
  $theme['node__jw_player_cdn_video'] = array(
    'render element' => 'content',
    'base hook' => 'node',
    'template' => 'node--jw_player_cdn_video',
    'path' => drupal_get_path('module', 'jw_player_cdn') . '/templates',
    'variables' => array(
      'jw_player_markup' => NULL,
    ),
  );
  $theme['jw_player_cdn_video_segment'] = array(
    'template' => 'jw-player-cdn-video-segment',
    'path' => drupal_get_path('module', 'jw_player_cdn') . '/templates',
    'variables' => array(
      'segment_title' => NULL,
      'segment_desc' => NULL,
      'segment_length' => NULL,
      'segment_thumbnail' => NULL,
      'vid' => NULL,
      'thumbnail_height' => NULL,
      'thumbnail_width' => NULL,
    ),
  );
  return $theme;
}

/**
 * Implements hook_preprocess_HOOK().
 */
function jw_player_cdn_preprocess_node(&$variables) {
  $node = & $variables['node'];
  // Add JS only to the node type for CDN Video.
  if ($node->type == 'jw_player_cdn_video') {
    $options = array();
    $options = drupal_get_query_parameters();
    if (!empty($options['vid'])) {
      $vid = check_plain($options['vid']);
    }
    else {
      $vid = 0;
    }
    // Load defaults as the starting point and override below as necessary.
    $default_settings = jw_player_cdn_default_settings();
    // Give each instance of the player a unique id. A random hash is used in
    // place of drupal_html_id() due to potentially conflicting ids in cases where
    // the entire output of the theme function is cached.
    $variables['html_id'] = drupal_html_id('jwplayercdn' . $node->nid);

    // Create a configuration array which will be passed to JWPlayer's JavaScript.
    $variables['jw_player_cdn_video_data'] = _jw_player_video_load($vid, $node->nid);
    $variables['file_url'] = $variables['jw_player_cdn_video_data']['jw_video_cdn_video'];
    $variables['config']['file'] = $variables['jw_player_cdn_video_data']['jw_video_cdn_video'];
    $variables['image'] = $variables['jw_player_cdn_video_data']['jw_video_cdn_thumb'];
    // Pull in logo information and set the jQuery setings.
    $logo = variable_get('jw_player_cdn_static_url_logo', FALSE);
    if (!empty($logo)) {
      $variables['config']['logo.file'] = $logo;
      $variables['config']['logo.position'] = 'top-left';
    }
    $skin = variable_get('jw_player_cdn_static_url_skin_pro');
    if ($skin != 0) {
      $skins_available = jw_player_cdn_pro_skin_list();
      $variables['config']['skin'] = drupal_strtolower($skins_available[$skin]);
    }
    $skin_custom = variable_get('jw_player_cdn_static_url_skin_custom');
    if (!empty($skin_custom)) {
      $variables['config']['skin'] = $skin_custom;
    }
    // @TODO Implement presets using CTools.
    // Load CTools presets here.
    // Merge all variables together. Preset settings take priority over defaults,
    // variables passed directly to the theme function take priority over both.
    $variables = array_merge($default_settings, $variables);
    // Copy player variables into their own array to be set as JavaScript
    // configuration.
    $player_variables = array(
      'width',
      'height',
      'image',
      'controls',
      'autoplay',
      'aspectratio',
      'primary',
    );
    foreach ($player_variables as $key) {
      if (!empty($variables[$key])) {
        $variables['config'][$key] = $variables[$key];
      }
    }
    // Start overriding default settings.
    $aspectratio = variable_get('jw_player_cdn_video_player_ratio');
    // If an aspect ratio has been set we use it.
    if (!empty($aspectratio)) {
      $ratios = jw_player_cdn_video_aspect_ratios();
      $variables['config']['aspectratio'] = $ratios[$aspectratio];
    }
    drupal_add_js(libraries_get_path('jwplayer') . '/jwplayer.js'); // Add library
    // Set the JW Player License if it has been supplied in settings. 
    $license = variable_get('jw_player_cdn_license_key', NULL);
    if (!empty($license)) {
      drupal_add_js('jwplayer.key=' . drupal_json_encode($license), array(
        'type' => 'inline',
        'scope' => 'header',
        'weight' => 5
      ));
    }
    drupal_add_js(drupal_get_path('module', 'jw_player_cdn') . '/jw_player_cdn.js'); // Attaches JW Player element
    drupal_add_js(array('jw_player_cdn' => array($variables['html_id'] => $variables['config'])), 'setting'); // Player settings
  }
}

/**
 * Private function to return video data details as signed URLs.
 */
function _jw_player_video_load($vidload, $nid = NULL) {
  $nodeinfo = node_load($nid);
  $vars = array();
  $vars['jw_video_cdn_video'] = jw_player_cdn_cloudfront_sign_url($nodeinfo->jw_player_cdn_video_series['und'][$vidload]['video']);
  $vars['jw_video_cdn_thumb'] = jw_player_cdn_cloudfront_sign_url($nodeinfo->jw_player_cdn_video_series['und'][$vidload]['thumb']);
  return $vars;
}

/**
 * Returns the default settings for JW Player CDN. Used in cases where a preset is
 * not provided when the JW Player CDN theme function is called.
 */
function jw_player_cdn_default_settings() {
  $defaults = &drupal_static(__FUNCTION__);

  if (!isset($defaults)) {
    $defaults = array(
      'flashplayer' => file_create_url(libraries_get_path('jwplayer') . '/jwplayer.flash.swf'),
      'width' => '100%',
      'autoplay' => FALSE,
      'controls' => 'bottom',
      'aspectratio' => '16:9',
      'primary' => 'html5',
    );
  }

  return $defaults;
}

/**
 * Returns the list of Pro skins offered by JW Player
 */
function jw_player_cdn_pro_skin_list() {
  $options = array(
    0 => t('-Select-'),
    1 => t('Six'),
    2 => t('Beelden'),
    3 => t('Bekle'),
    4 => t('Five'),
    5 => t('Glow'),
    6 => t('Roundster'),
    7 => t('Stormtrooper'),
    8 => t('Vapor'),
  );
  return $options;
}

/**
 * Returns common aspect ratios for video player settings
 */
function jw_player_cdn_video_aspect_ratios() {
  $options = array(
    0 => t('-Select-'),
    1 => t('4:3'),
    2 => t('5:3'),
    3 => t('5:4'),
    4 => t('16:9'),
    5 => t('16:10'),
    6 => t('16.18:10'),
    7 => t('21:9'),
  );
  return $options;
}
