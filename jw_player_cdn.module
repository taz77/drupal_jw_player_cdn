<?php

/**
 * @file
 * Module file for JW Player CDN Module.
 */
// Load all Field module hooks.
module_load_include('inc', 'jw_player_cdn', 'jw_player_cdn.field');

// Load services
module_load_include('inc', 'jw_player_cdn', 'services/cloudfront');

/**
 * Implements hook_menu().
 */
function jw_player_cdn_menu() {
  $items = array();
  $items['admin/config/media/jw_player_cdn/settings'] = array(
    'title' => 'JW Player CDN Settings',
    'description' => 'JW Player CDN Setting Page',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('jw_player_cdn_admin'),
    'access arguments' => array('administer jwplayer cdn module'),
    'file' => 'jw_player_cdn.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function jw_player_cdn_permission() {
  return array(
    'administer jwplayer cdn module' => array(
      'title' => t('Administer JW Player CDN Module'),
    ),
  );
}

/**
 * Node Creation Hooks and Information
 */

/**
 * Implements hook_node_info().
 *
 * We use hook_node_info() to define our node content type.
 */
function jw_player_cdn_node_info() {
  // We define the node type as an associative array.
  return array(
    'jw_player_cdn_video' => array(
      'name' => t('Video Series for JW Player'),
      'base' => 'jw_player_cdn',
      'description' => t('These are nodes used to build video series.'),
      'title_label' => t('Video Name'),
      // We'll set the 'locked' attribute to TRUE, so users won't be
      // able to change the machine name of our content type.
      'locked' => TRUE,
    ),
  );
}

/**
 * Implements hook_form().
 *
 * Drupal needs for us to provide a form that lets the user
 * add content. This is the form that the user will see if
 * they go to node/add/jw-player-cdn.
 *
 * You can get fancy with this form, or you can just punt
 * and return the default form that node_content will provide.
 */
function jw_player_cdn_form($node, $form_state) {
  return node_content_form($node, $form_state);
}

/**
 * Implements hook_node_type_insert().
 */
function jw_player_cdn_node_type_insert($content_type) {
  echo $content_type->type;
  if ($content_type->type == 'jw_player_cdn_video') {

    foreach (jw_player_cdn_installed_fields() as $field) {
      field_create_field($field);
    }
    // Create all the instances for our fields.
    foreach (jw_player_cdn_installed_instances() as $instance) {
      $instance['entity_type'] = 'node';
      $instance['bundle'] = 'jw_player_cdn_video';
      field_create_instance($instance);
    }
  }
}

/**
 * Returns fields created by this module.
 */
function jw_player_cdn_installed_fields() {
  return array(
    'player_cdn_files' => array(
      'field_name' => 'jw_player_cdn_video_series',
      'cardinality' => FIELD_CARDINALITY_UNLIMITED,
      'type' => 'jw_player_cdn_video_series',
    ),
    'player_cdn_description' => array(
      'field_name' => 'jw_player_cdn_video_desc',
      'cardinality' => 1,
      'type' => 'text_long',
    )
  );
}

/**
 * Define the field instances for our content type.
 *
 * The instance lets Drupal know which widget to use to allow the user to enter
 * data and how to react in different view modes.  We are going to display a
 * page that uses a custom "node_example_list" view mode.  We will set a
 * cardinality of three allowing our content type to give the user three color
 * fields.
 *
 * This big array is factored into this function for readability.
 *
 * @return array
 *   An associative array specifying the instances we wish to add to our new
 *   node type.
 */
function jw_player_cdn_installed_instances() {
  return array(
    'jw_player_video_series_instance_files' => array(
      'field_name' => 'jw_player_cdn_video_series',
      'label' => t('Videos for this series'),
      'widget' => array(
        'type' => 'jw_player_cdn_video_series_widget',
        'weight' => 10,
      ),
    ),
    'jw_player_video_series_instance_desc' => array(
      'field_name' => 'jw_player_cdn_video_desc',
      'label' => t('Description of this video series.'),
      'type' => 'jw_player_cdn_video_desc',
      'widget' => array(
        'active' => 1,
        'module' => 'text',
        'settings' => array(
          'rows' => 5,
        ),
        'type' => 'text_textarea',
        'weight' => 1,
      ),
      'format' => 'filter_html',
      'settings' => array(
        'text_processing' => 1,
        'user_register_form' => FALSE,
      ),
    ),
  );
}

/**
 * ****************************************************************************
 * Themeing of Custom Node Type
 * ****************************************************************************
 */

/**
 * Implements hook_theme().
 */
function jw_player_cdn_theme() {
  $theme = array();
  $theme['node__jw_player_cdn_video'] = array(
    'render element' => 'content',
    'base hook' => 'node',
    'template' => 'node--jw_player_cdn_video',
    'path' => drupal_get_path('module', 'jw_player_cdn') . '/templates',
    'variables' => array(
      'jw_player_markup' => NULL,
    ),
  );
  $theme['jw_player_cdn_video_segment'] = array(
    'template' => 'jw-player-cdn-video-segment',
    'path' => drupal_get_path('module', 'jw_player_cdn') . '/templates',
    'variables' => array(
      'segment_title' => NULL,
      'segment_desc' => NULL,
      'segment_length' => NULL,
      'segment_thumbnail' => NULL,
      'vid' => NULL,
      'thumbnail_height' => NULL,
      'thumbnail_width' => NULL,
    ),
  );
  return $theme;
}

/**
 * Implements hook_preprocess_HOOK().
 */
function jw_player_cdn_preprocess_node(&$variables) {
  $node = & $variables['node'];
  // Add JS only to the node type for CDN Video.
  if ($node->type == 'jw_player_cdn_video') {
    $options = array();
    $options = drupal_get_query_parameters();
    if (isset($options['vid'])) {
      $vid = check_plain($options['vid']);
    }
    else {
      $vid = 0;
    }
    $variables['jw_player_markup'] = _jw_player_markup($vid, $node->nid);
    drupal_add_js(libraries_get_path('jwplayer') . '/jwplayer.js'); // Add library
    drupal_add_js(drupal_get_path('module', 'jw_player_cdn') . '/jw_player_cdn.js'); // Attaches JW Player element
    // Set the JW Player License if it has been supplied in settings.
    $license = variable_get('jw_player_cdn_license_key', NULL);
    if (!empty($license)) {
      $jshead = '<script type="text/javascript">jwplayer.key="' . $license . '";</script>';
      drupal_add_js($jshead);
    }
  }
}

/**
 * Implements hook_ctools_plugin_api().
 */
function jw_player_cdn_ctools_plugin_api($owner, $api) {
  if ($owner == 'jw_player_cdn' && $api == 'jw_player_cdn_presets') {
    return array('version' => 1);
  }
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function jw_player_cdn_ctools_plugin_directory($module, $type) {
  // Load the export_ui plugin.
  if ($type == 'export_ui') {
    return 'plugins/export_ui';
  }
}

/**
 * Private function to create the JW Player Markup and return for a theme var.
 */
function _jw_player_markup($vidload, $nid = NULL) {
  $nodeinfo = node_load($nid);
  $video = jw_player_cdn_cloudfront_sign_url($nodeinfo->jw_player_cdn_video_series['und'][$vidload]['video']);
  $thumb = jw_player_cdn_cloudfront_sign_url($nodeinfo->jw_player_cdn_video_series['und'][$vidload]['thumb']);
  $vars = &drupal_static(__FUNCTION__, array());
  // @TODO Implement presets using CTools.
  $mode = 'html5';
  $height = 620;
  $width = 360;
  $controlbar = 'bottom';
  $vars['jw_player_markup'] = '<p>TESTTESTTEST ' . $vidload . ' DELTA</p><p>NODE ID ' . $nid . '</p>';
  return isset($vars['jw_player_markup']) ? $vars['jw_player_markup'] : NULL;
}

/**
 * Load the given preset(s).
 * @param string $machine_name
 * @return array
 */
function jw_player_cdn_preset_load($machine_name = NULL) {
  ctools_include('export');
  if (isset($machine_name)) {
    $items = ctools_export_crud_load('jw_player_cdn_preset', $machine_name);
    // CTools returns an object, so we explictly typecast it to array before
    // returning.
    return $items = (array) $items;
  }
  else {
    $result = ctools_export_crud_load_all('jw_player_cdn_preset');
    if (!empty($result)) {
      foreach ($result as $key => $item) {
        $items[$key] = (array) $item;
      }
      return $items;
    }
  }
}
