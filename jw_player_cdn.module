<?php

/**
 * @file
 * Module file for JW Player CDN Module.
 */

/**
 * Implements hook_menu().
 */
function jw_player_cdn_menu() {
  $items = array();
  $items['admin/config/services/jw-player-cdn'] = array(
    'title' => 'JW Player CDN Admin Page',
    'description' => 'JW Player CDN Setting Page',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('jw_player_cdn_admin'),
    'access arguments' => array('administer jwplayer cdn module'),
    'file' => 'jw_player_cdn.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function jw_player_cdn_permission() {
  return array(
    'administer jwplayer cdn module' => array(
      'title' => t('Administer JW Player CDN Module'),
    ),
  );
}

/**
 * Node Creation Hooks and Information
 */

/**
 * Implements hook_node_info().
 *
 * We use hook_node_info() to define our node content type.
 */
function jw_player_cdn_node_info() {
  // We define the node type as an associative array.
  return array(
    'jw_player_cdn_video' => array(
      'name' => t('Video Series for JW Player'),
      'base' => 'jw_player_cdn',
      'description' => t('These are nodes used to build video series.'),
      'title_label' => t('Video Name'),
      // We'll set the 'locked' attribute to TRUE, so users won't be
      // able to change the machine name of our content type.
      'locked' => TRUE,
    ),
  );
}

/**
 * Implements hook_form().
 *
 * Drupal needs for us to provide a form that lets the user
 * add content. This is the form that the user will see if
 * they go to node/add/jw-player-cdn
 *
 * You can get fancy with this form, or you can just punt
 * and return the default form that node_content will provide.
 */
function jw_player_cdn_form($node, $form_state) {
  return node_content_form($node, $form_state);
}

/**
 * Implements hook_node_type_insert().
 */
function jw_player_cdn_node_type_insert($content_type) {
  echo $content_type->type;
  if ($content_type->type == 'jw_player_cdn_video') {

    foreach (jw_player_cdn_installed_fields() as $field) {
      field_create_field($field);
    }
    $instance = array(
      'entity_type' => 'node',
      'bundle' => 'jw_player_cdn_video',
      'field_name' => 'jw_player_cdn_video_series',
      'label' => t('Videos for this series.'),
      'widget' => array(
        'type' => 'jw_player_cdn_video_series_widget',
      ),
    );
    $instance['entity_type'] = 'node';
    $instance['bundle'] = 'jw_player_cdn_video';
    field_create_instance($instance);
  }
}

/**
 * Returns fields created by this module.
 */
function jw_player_cdn_installed_fields() {
  return array(
    'player_cdn_files' => array(
      'field_name' => 'jw_player_cdn_video_series',
      'cardinality' => FIELD_CARDINALITY_UNLIMITED,
      'type' => 'jw_player_cdn_video_series',
    ),
  );
}

/**
 * Field Creation Hooks and Information
 */

/**
 * Implements hook_field_info().
 */
function jw_player_cdn_field_info() {
  return array(
    // We name our field as the associative name of the array.
    'jw_player_cdn_video_series' => array(
      'label' => t('JW Player CDN Video Entries'),
      'description' => t('Video Series Playlist.'),
      'default_widget' => 'jw_player_cdn_video_series_widget',
      'default_formatter' => 'jw_player_cdn_video_series_formatter',
    ),
  );
}

/**
 * Implements hook_field_is_empty().
 */
function jw_player_cdn_field_is_empty($item, $field) {
  return empty($item['video']);
}

/**
 * Implements hook_field_formatter_info().
 *
 * We need to tell Drupal that we have two different types of formatters
 * for this field. One will change the text color, and the other will
 * change the background color.
 *
 * @see field_example_field_formatter_view()
 */
function jw_player_cdn_field_formatter_info() {
  return array(
    // This formatter just displays the hex value in the color indicated.
    'jw_player_cdn_video_series_formatter' => array(
      'label' => t('Simple text-based formatter'),
      'field types' => array('jw_player_cdn_video_series'),
    ),
  );
}

/**
 * Implements hook_field_widget_info().
 */
function jw_player_cdn_field_widget_info() {
  return array(
    'jw_player_cdn_video_series_widget' => array(
      'label' => t('Video Series Information'),
      'field types' => array('jw_player_cdn_video_series'),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 */
function jw_player_cdn_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $value = isset($items[$delta]['video']) ? $items[$delta]['video'] : '';
  $widget = $element;
  $widget['#delta'] = $delta;

  // Make this a fieldset with two text fields.
  $widget += array(
    '#type' => 'fieldset',
    //'#element_validate' => array('field_example_3text_validate'),
    // #delta is set so that the validation function will be able
    // to access external value information which otherwise would be
    // unavailable.
    // '#delta' => $delta,
  );

  // Create a textfield for saturation values for Red, Green, and Blue.
  foreach (array('video' => t('Video URL'), 'thumb' => t('Thumbnail URL')) as $key => $title) {
    if ($key == 'video') {
      $description = t('Provide the URL to the video.');
    }
    if ($key == 'thumb') {
      $description = t('Provide the URL to the thumbnail for this video.');
    }
    $widget[$key] = array(
      '#type' => 'textfield',
      '#title' => $title,
      '#size' => 100,
      '#default_value' => '',
      '#attributes' => array('class' => array('video-entry')),
      '#description' => $description,
    );
    // Since Form API doesn't allow a fieldset to be required, we
    // have to require each field element individually.
    if ($instance['required'] == 1) {
      $widget[$key]['#required'] = 1;
    }
  }

  $element['video'] = $widget;
  return $element;
}
